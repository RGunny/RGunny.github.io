<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://RGunny.github.io</id><title>RGunny</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-04-14T09:08:39+09:00</updated> <author> <name>GeonHee Ryu</name> <uri>https://RGunny.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://RGunny.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 GeonHee Ryu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Java LiveStudy(13) - 자바 I/O</title><link href="https://RGunny.github.io/posts/Java_13_IO/" rel="alternate" type="text/html" title="Java LiveStudy(13) - 자바 I/O" /><published>2021-02-20T18:00:00+09:00</published> <updated>2021-02-20T18:00:00+09:00</updated> <id>https://RGunny.github.io/posts/Java_13_IO/</id> <content src="https://RGunny.github.io/posts/Java_13_IO/" /> <author> <name>GeonHee Ryu</name> </author> <category term="Java" /> <category term="liveStudy" /> <summary> Goal 자바의 Input과 Ontput에 대해 학습하세요. 13.1 스트림 (Stream) / 버퍼 (Buffer) / 채널 (Channel) 기반의 I/O 13.2 InputStream과 OutputStream 13.3 Byte와 Character 스트림 13.4 표준 스트림 (System.in, System.out, System.err) 13.5 파일 읽고 쓰기 References https://github.com/whiteship/live-study https://github.com/whiteship/live-study/issues/13 </summary> </entry> <entry><title>Java LiveStudy(3) - 연산자</title><link href="https://RGunny.github.io/posts/Java_03_Operator/" rel="alternate" type="text/html" title="Java LiveStudy(3) - 연산자" /><published>2021-02-14T18:00:00+09:00</published> <updated>2021-02-14T18:00:00+09:00</updated> <id>https://RGunny.github.io/posts/Java_03_Operator/</id> <content src="https://RGunny.github.io/posts/Java_03_Operator/" /> <author> <name>GeonHee Ryu</name> </author> <category term="Java" /> <category term="liveStudy" /> <summary> Goal 자바가 제공하는 다양한 연산자를 학습하세요. 3.1 연산자 3.1.1 산술 연산자 3.1.2 비트 연산자 3.1.3 관계 연산자 3.1.4 논리 연산자 3.2 instanceof 3.3 assignment(=) operator 3.4 화살표(-&amp;gt;) 연산자 3.5 3항 연산자 3.6 연산자 우선 순위 3.7 (optional) Java 13. switch 연산자 </summary> </entry> <entry><title>Java LiveStudy(2) - 자바 데이터 타입, 변수 그리고 배열</title><link href="https://RGunny.github.io/posts/Java_02_dtype_variable_array/" rel="alternate" type="text/html" title="Java LiveStudy(2) - 자바 데이터 타입, 변수 그리고 배열" /><published>2021-02-14T18:00:00+09:00</published> <updated>2021-04-14T09:03:01+09:00</updated> <id>https://RGunny.github.io/posts/Java_02_dtype_variable_array/</id> <content src="https://RGunny.github.io/posts/Java_02_dtype_variable_array/" /> <author> <name>GeonHee Ryu</name> </author> <category term="Java" /> <category term="liveStudy" /> <summary> Goal 자바의 프리미티브 타입, 변수 그리고 배열을 사용하는 방법을 익힙니다. 2.1 프리미티브 타입 종류와 값의 범위 그리고 기본 값 2.2 프리미티브 타입과 레퍼런스 타입 2.2.1 기본형(Primitive) Type이란? 8가지의 기본형 타입을 미리 제공하여 제공합니다. boolean, byte, short, int, long, float, double, char 기본값이 있기 때문에 Null이 존재하지 않습니다. 실제 값을 저장하는 공간으로 JVM의 Runtime Data Area 영역 중 스택(Stack) 메모리 영역에 저장됩니다. 컴파일 시점에 해당 메모리 크기를 초과하면 out of range 에러가 발생합니다. 실제 ... </summary> </entry> <entry><title>Java LiveStudy(1) - JVM</title><link href="https://RGunny.github.io/posts/Java_01_JVM/" rel="alternate" type="text/html" title="Java LiveStudy(1) - JVM" /><published>2021-01-01T18:00:00+09:00</published> <updated>2021-04-14T09:03:01+09:00</updated> <id>https://RGunny.github.io/posts/Java_01_JVM/</id> <content src="https://RGunny.github.io/posts/Java_01_JVM/" /> <author> <name>GeonHee Ryu</name> </author> <category term="Java" /> <category term="liveStudy" /> <summary> Goal 자바 소스 파일(.java)을 JVM으로 실행하는 과정 이해하기. 1.1 JVM(: Java Virsual Machine)`이란 무엇인가 JVM : 자바를 실행해주는 머신(프로그램) 정확히는, 컴퓨터가 자바 바이트 코드로 컴파일된 모든 프로그램을 실행할 수 있도록 런타임 환경을 제공하는 소프트웨어 입니다. 어느 OS에서든 실행시키기 위해서 Java 애플리케이션은 JVM을 거친 후 OS를 거치게 되고, 해당 HW에 맞게 완전히 컴파일된 상태가 아닌 실행 시 해석(Interpret)되기 때문에 속도가 비교적 느리다는 단점이 있습니다. 하지만, 최근에 Java Bytecode (JVM이 실행하는 명령어의 형태이며, 자바에서 컴파일된 코드)를 HW의 기계어로 바로 변환해주는... </summary> </entry> </feed>
